📰 Fake News Detection with Naive Bayes
==========================================
In today's information-rich world, separating fact from fiction has never been more crucial. This project tackles
the challenge of "fake news detection" using the "ISOT Fake and Real News Dataset", applying natural language
processing (NLP) techniques and a Naive Bayes classifier to accurately identify misleading or false news articles.

-------------------------------------------------------------------------------------------------------------------

🔍 Project Overview
====================
- **Algorithm Used: Multinomial Naive Bayes
- **Dataset: [ISOT Fake and Real News Dataset](https://www.kaggle.com/datasets/clmentbisaillon/fake-and-real-news-dataset)
- **Problem Type: Binary Text Classification (Fake vs Real)
- **Goal: Train a model that can automatically determine if a given news article is fake or real based on its content.

--------------------------------------------------------------------------------------------------------------------------

🧰 What’s Inside?
=====================
- 🧹 Text cleaning & preprocessing: Lowercasing, punctuation removal, digit filtering, whitespace cleanup.
- 📊 Exploratory Data Analysis (EDA):
  - Class distribution plots
  - Word clouds to visualize high-frequency terms in fake and real articles
- 🧠 Model building using TF-IDF for feature extraction and Multinomial Naive Bayes for classification
- 📈 Evaluation on a held-out test set
- 💾 Model saving using `joblib` for future use

---------------------------------------------------------------------------------------------------------------------------

📊 Model Performance
=====================
After training and evaluating the model on 8,980 news articles, we achieved the following:
- ✅ Accuracy: 93.47%

🔸 Class-wise Breakdown:
=========================
- **Fake News**:
-----------------
  - Precision: 94%  
  - Recall: 93%  
  - F1-Score: 94%

- **Real News**: 
-----------------
  - Precision: 93%  
  - Recall: 94%  
  - F1-Score: 93%

The results reflect a well-balanced and high-performing model that generalizes well across both classes.

-------------------------------------------------------------------------------------------------------------------

📁 Files in This Project
=========================
- `Fake.csv` and `True.csv`: The source datasets for fake and real news articles.
- `fake_news_detection.ipynb`: Complete Jupyter Notebook with all steps.
- `naive_bayes_fake_news_model.pkl`: Trained Naive Bayes model.
- `tfidf_vectorizer.pkl`: Saved TF-IDF vectorizer.
- `README.md`: You're reading it 😉

---------------------------------------------------------------------------------------------------------------------

🧠 Why Naive Bayes?
====================
Naive Bayes is lightweight, interpretable, and often performs surprisingly well in text classification problems.
It's based on probabilistic reasoning and assumes word independence—making it fast and easy to deploy.

----------------------------------------------------------------------------------------------------------------------

🎯 Potential Improvements
==========================
While the model performed quite well, further improvements could include:

- Using more advanced vectorization (e.g., n-grams, word embeddings)
- Trying deep learning models (e.g., LSTMs, transformers)
- Adding metadata (like title, subject) into the model pipeline
- Handling sarcasm and clickbait—more advanced NLP needed

------------------------------------------------------------------------------------------------------------------------

🙌 Final Thoughts
==================
This project is a great example of how classical machine learning combined with solid preprocessing can still deliver 
strong results in NLP tasks. The balance in class performance and the overall accuracy suggest that the model could be 
a helpful tool in combating misinformation online.

--------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------

